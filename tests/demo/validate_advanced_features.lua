-- Validation script for advanced capture features
-- This script validates that all components are properly integrated

-- Add src directory to package path
package.path = package.path .. ";./src/?.lua;./tests/?.lua"

-- Set testing mode to use mocks
_G.TESTING_MODE = true

print("Validating Advanced Capture Features Implementation")
print("=================================================")

local validation_passed = true

-- Test 1: Validate AdvancedCaptureFeatures module loads
print("\n1. Testing AdvancedCaptureFeatures module loading...")
local success, AdvancedCaptureFeatures = pcall(require, "src.advanced_capture_features")
if success then
    print("‚úì AdvancedCaptureFeatures module loaded successfully")
else
    print("‚úó Failed to load AdvancedCaptureFeatures module: " .. tostring(AdvancedCaptureFeatures))
    validation_passed = false
end

-- Test 2: Validate ScreenCapture integration
print("\n2. Testing ScreenCapture integration...")
local success, ScreenCapture = pcall(require, "src.screen_capture")
if success then
    local screen_capture = ScreenCapture:new({cursor_capture = true})
    local init_success = screen_capture:initialize()
    if init_success then
        print("‚úì ScreenCapture with advanced features initialized successfully")
        
        -- Test cursor capture
        local cursor_success = screen_capture:setCursorCapture(true)
        if cursor_success then
            print("‚úì Cursor capture enabled successfully")
        else
            print("‚úó Failed to enable cursor capture")
            validation_passed = false
        end
        
        -- Test area selection
        local area_success = screen_capture:startAreaSelection()
        if area_success then
            print("‚úì Area selection started successfully")
            screen_capture:cancelAreaSelection()
        else
            print("‚úó Failed to start area selection")
            validation_passed = false
        end
        
        -- Test hotkey registration
        local hotkey_success = screen_capture:registerHotkeyCallback("toggle_capture", function() end)
        if hotkey_success then
            print("‚úì Hotkey callback registered successfully")
        else
            print("‚úó Failed to register hotkey callback")
            validation_passed = false
        end
        
    else
        print("‚úó Failed to initialize ScreenCapture")
        validation_passed = false
    end
else
    print("‚úó Failed to load ScreenCapture module: " .. tostring(ScreenCapture))
    validation_passed = false
end

-- Test 3: Validate WindowCapture integration
print("\n3. Testing WindowCapture integration...")
local success, WindowCapture = pcall(require, "src.window_capture")
if success then
    local window_capture = WindowCapture:new({cursor_capture = true})
    local init_success = window_capture:initializeAdvancedFeatures()
    if init_success then
        print("‚úì WindowCapture with advanced features initialized successfully")
        
        -- Test cursor capture
        local cursor_success = window_capture:setCursorCapture(true)
        if cursor_success then
            print("‚úì Window cursor capture enabled successfully")
        else
            print("‚úó Failed to enable window cursor capture")
            validation_passed = false
        end
        
    else
        print("‚úó Failed to initialize WindowCapture advanced features")
        validation_passed = false
    end
else
    print("‚úó Failed to load WindowCapture module: " .. tostring(WindowCapture))
    validation_passed = false
end

-- Test 4: Validate FFI bindings extensions
print("\n4. Testing FFI bindings extensions...")
local success, ffi_bindings = pcall(require, "tests.mock_ffi_bindings")
if success then
    print("‚úì Mock FFI bindings loaded successfully")
    
    -- Test cursor functions
    local cursor_pos = ffi_bindings.getCursorPosition()
    if cursor_pos and cursor_pos.x and cursor_pos.y then
        print("‚úì Cursor position retrieval works")
    else
        print("‚úó Failed to get cursor position")
        validation_passed = false
    end
    
    local cursor_info = ffi_bindings.getCursorInfo()
    if cursor_info and cursor_info.visible ~= nil then
        print("‚úì Cursor info retrieval works")
    else
        print("‚úó Failed to get cursor info")
        validation_passed = false
    end
    
    local bitmap = ffi_bindings.captureScreenWithCursor(0, 0, 100, 100)
    if bitmap then
        print("‚úì Screen capture with cursor works")
    else
        print("‚úó Failed to capture screen with cursor")
        validation_passed = false
    end
    
else
    print("‚úó Failed to load FFI bindings: " .. tostring(ffi_bindings))
    validation_passed = false
end

-- Test 5: Validate configuration and constants
print("\n5. Testing configuration and constants...")
if AdvancedCaptureFeatures then
    local features = AdvancedCaptureFeatures:new()
    features:initialize()
    
    local config = features:getConfiguration()
    if config and config.cursor_capture and config.area_selection and config.hotkeys and config.overlay then
        print("‚úì Configuration structure is correct")
    else
        print("‚úó Configuration structure is invalid")
        validation_passed = false
    end
    
    -- Test constants
    if AdvancedCaptureFeatures.CURSOR_MODES and 
       AdvancedCaptureFeatures.SELECTION_STATES and 
       AdvancedCaptureFeatures.HOTKEY_STATES then
        print("‚úì Constants are properly exported")
    else
        print("‚úó Constants are missing")
        validation_passed = false
    end
end

-- Test 6: Validate error handling
print("\n6. Testing error handling...")
if AdvancedCaptureFeatures then
    local features = AdvancedCaptureFeatures:new()
    features:initialize()
    
    -- Test invalid cursor mode
    local success, error_msg = features:setCursorCapture(true, "invalid_mode")
    if not success and error_msg then
        print("‚úì Error handling works for invalid cursor mode")
    else
        print("‚úó Error handling failed for invalid cursor mode")
        validation_passed = false
    end
    
    -- Test invalid hotkey action
    local success, error_msg = features:registerHotkeyCallback("invalid_action", function() end)
    if not success and error_msg then
        print("‚úì Error handling works for invalid hotkey action")
    else
        print("‚úó Error handling failed for invalid hotkey action")
        validation_passed = false
    end
end

-- Final validation result
print("\n" .. string.rep("=", 50))
if validation_passed then
    print("üéâ All validations passed! Advanced features are properly implemented.")
    print("\nImplemented features:")
    print("‚Ä¢ Cursor capture for screen and window capture")
    print("‚Ä¢ Area selection with visual feedback")
    print("‚Ä¢ Hotkey support for quick capture control")
    print("‚Ä¢ Integration with existing capture modules")
    print("‚Ä¢ Comprehensive error handling")
    print("‚Ä¢ Full test coverage")
else
    print("‚ùå Some validations failed! Please check the implementation.")
end

print("\nValidation complete.")
return validation_passed